CREATE FUNCTION gcoord_in(cstring)
   RETURNS GeoCoord
   AS '_OBJWD_/gcoord'
   LANGUAGE C IMMUTABLE STRICT;



CREATE FUNCTION gcoord_out(GeoCoord)
   RETURNS cstring
   AS '_OBJWD_/gcoord'
   LANGUAGE C IMMUTABLE STRICT;




CREATE TYPE GeoCoord (
   internallength = VARIABLE,
   input = gcoord_in,
   output = gcoord_out,
   alignment = int
);



-- first, define the required operators
CREATE FUNCTION gcoord_abs_lt(GeoCoord, GeoCoord) RETURNS bool
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION gcoord_abs_le(GeoCoord, GeoCoord) RETURNS bool
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION gcoord_abs_eq(GeoCoord, GeoCoord) RETURNS bool
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION gcoord_abs_ge(GeoCoord, GeoCoord) RETURNS bool
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION gcoord_abs_gt(GeoCoord, GeoCoord) RETURNS bool
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION gcoord_abs_neq(GeoCoord, GeoCoord) RETURNS bool
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION gcoord_abs_wave(GeoCoord, GeoCoord) RETURNS bool
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION gcoord_abs_nwave(GeoCoord, GeoCoord) RETURNS bool
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR < (
   leftarg = GeoCoord, rightarg = GeoCoord, procedure = gcoord_abs_lt,
   commutator = > , negator = >= ,
   restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR <= (
   leftarg = GeoCoord, rightarg = GeoCoord, procedure = gcoord_abs_le,
   commutator = >= , negator = > ,
   restrict = scalarlesel, join = scalarlejoinsel
);
CREATE OPERATOR = (
   leftarg = GeoCoord, rightarg = GeoCoord, procedure = gcoord_abs_eq,
   commutator = = ,
   -- leave out negator since we didn't create <> operator
   -- negator = <> ,
   restrict = eqsel, join = eqjoinsel
);
CREATE OPERATOR >= (
   leftarg = GeoCoord, rightarg = GeoCoord, procedure = gcoord_abs_ge,
   commutator = <= , negator = < ,
   restrict = scalargesel, join = scalargejoinsel
);
CREATE OPERATOR > (
   leftarg = GeoCoord, rightarg = GeoCoord, procedure = gcoord_abs_gt,
   commutator = < , negator = <= ,
   restrict = scalargtsel, join = scalargtjoinsel
);

CREATE OPERATOR <> (
   leftarg = GeoCoord, rightarg = GeoCoord, procedure = gcoord_abs_neq,
   commutator = <> ,
   -- leave out negator since we didn't create <> operator
   -- negator = = ,
   restrict = eqsel, join = eqjoinsel
);

CREATE OPERATOR ~ (
   leftarg = GeoCoord, rightarg = GeoCoord, procedure = gcoord_abs_wave,
   commutator = ~ ,
   negator = !~ ,
   restrict = eqsel, join = eqjoinsel
);

CREATE OPERATOR !~ (
   leftarg = GeoCoord, rightarg = GeoCoord, procedure = gcoord_abs_nwave,
   commutator = !~ ,
   negator = ~ ,
   restrict = eqsel, join = eqjoinsel
);



-- create the support function too
CREATE FUNCTION gcoord_abs_cmp(GeoCoord, GeoCoord) RETURNS int4
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;



-- create the support function too
CREATE FUNCTION convert2dms(GeoCoord) RETURNS text
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;

-- now we can make the operator class
CREATE OPERATOR CLASS gcoord_abs_ops
    DEFAULT FOR TYPE GeoCoord USING btree AS
        OPERATOR        1       < ,
        OPERATOR        2       <= ,
        OPERATOR        3       = ,
        OPERATOR        4       >= ,
        OPERATOR        5       > ,
        FUNCTION        1       gcoord_abs_cmp(GeoCoord, GeoCoord);


CREATE FUNCTION hash_gcoord(GeoCoord) RETURNS int4
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR CLASS gcoord_hash_ops
   DEFAULT FOR TYPE GeoCoord USING hash AS
      OPERATOR         1       = ,
      FUNCTION         1       hash_gcoord(GeoCoord);
